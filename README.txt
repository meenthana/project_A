1. โค้ดที่ป้องกันการล็อกเงินไว้ในสัญญา (Contract)
ใน Commit-Reveal scheme โค้ดได้ออกแบบเพื่อป้องกันไม่ให้เงินถูกล็อกไว้ในสัญญาโดยไม่มีการเปิดเผยผลหรือไม่มีการตัดสินใจที่ชัดเจน ซึ่งเป็นปัญหาที่อาจเกิดขึ้นได้หากผู้เล่นไม่ทำการเปิดเผย (reveal) ตัวเลือกของตนเองหลังจาก commit ไว้

ในโค้ดนี้จะมีการกำหนดข้อจำกัดเวลาในการทำ reveal โดยตรวจสอบจำนวน block ที่ผ่านไปหลังจากที่ผู้เล่นทำการ commit เช่น ฟังก์ชัน reveal() มีการตรวจสอบจำนวนบล็อก:

require(uint64(block.number) <= commits[msg.sender].blockNumber + 250, "CommitReveal::reveal: Revealed too late");
หมายความว่า ผู้เล่นต้องทำการ reveal ภายใน 250 บล็อกหลังจาก commit มิฉะนั้นการ reveal จะถือว่าสายเกินไป ซึ่งช่วยป้องกันไม่ให้เงินถูกล็อกไว้นานเกินไป.

หากมีความต้องการเพิ่มเติมในการคืนเงินเมื่อไม่มีการ reveal จากทั้งสองฝ่าย สามารถเพิ่มฟังก์ชัน timeout ได้เพื่อคืนเงินโดยอัตโนมัติ.

2. โค้ดส่วนที่ทำการซ่อน choice และ commit
ในส่วนของการซ่อนตัวเลือกของผู้เล่นเพื่อป้องกันการถูกคาดเดาหรือ front-running จะใช้เทคนิคการ hash ข้อมูลของ choice กับค่า salt ซึ่งเป็นค่าที่ผู้เล่นกำหนดเอง. การนำ choice และ salt มารวมกันและ hash ก่อนที่จะ commit ทำให้ผู้เล่นคนอื่นไม่สามารถเดาได้ว่าเลือกอะไร

ตัวอย่าง:function getCommitHash(bytes32 choice, bytes32 salt) public pure returns (bytes32) {
    return keccak256(abi.encodePacked(choice, salt));
}
choice: คือตัวเลือกของผู้เล่น (เช่น หิน, กรรไกร, กระดาษ หรือข้อมูลอื่นๆ).
salt: เป็นค่า random ที่ผู้เล่นกำหนดขึ้นมาเองเพื่อเพิ่มความยากในการเดา.
commit: ฟังก์ชัน commit() จะเก็บค่า hash ของ choice + salt ไว้ในสัญญาโดยที่ไม่มีใครทราบค่าจริงๆ ของตัวเลือกจนกว่าจะถึงขั้นตอน reveal.
3. โค้ดส่วนที่จัดการกับความล่าช้าที่ผู้เล่นไม่ครบทั้งสองคนเสียที
โค้ดนี้ไม่มีการจัดการเรื่องการล่าช้าในกรณีที่ผู้เล่นเข้าร่วมเกมไม่ครบทั้งสองคนโดยตรง แต่มีการป้องกันเรื่องการล่าช้าหลังจาก commit ด้วยการกำหนด block เวลาสำหรับการ reveal ไว้.
หากผู้เล่นหนึ่งคนไม่ทำการ commit หรือล่าช้าในการ reveal หลังจาก commit ไปแล้วเกินจำนวนบล็อกที่กำหนด (250 บล็อกในตัวอย่างนี้) การ reveal จะไม่สามารถทำได้ และสามารถออกแบบให้คืนเงินแก่ผู้เล่นที่รอคอยได้ในภายหลัง.
เพื่อจัดการกรณีผู้เล่นเข้ามาไม่ครบ สามารถเพิ่มฟังก์ชัน timeout สำหรับการรอคอยผู้เล่นคนอื่น โดยหากครบกำหนดเวลาแล้วผู้เล่นอีกคนยังไม่เข้าร่วม เกมสามารถคืนเงินหรือจบได้.

4. โค้ดส่วนที่ทำการ reveal และนำ choice มาตัดสินผู้ชนะ
เมื่อถึงขั้นตอน reveal ผู้เล่นจะต้องส่งตัวเลือกและ salt ที่ใช้ตอน commit เพื่อให้ระบบตรวจสอบว่า hash ที่เคย commit ไว้ตรงกับค่าที่เปิดเผยหรือไม่:
function reveal(bytes32 revealChoice, bytes32 revealSalt) public {
    require(getCommitHash(revealChoice, revealSalt) == commits[msg.sender].commitHash, 
        "CommitReveal::reveal: Revealed data does not match commit");
}
ระบบจะทำการตรวจสอบดังนี้:คำนวณ hash จาก revealChoice + revealSalt เพื่อเปรียบเทียบกับค่า hash ที่เคย commit ไว้.
ถ้าข้อมูลตรงกัน ระบบจะดำเนินการต่อไป ซึ่งอาจจะสร้างผลลัพธ์จากข้อมูลเหล่านั้น เช่น ตัดสินผลแพ้ชนะด้วยการใช้ค่า random.
ตัวอย่างการสร้างค่า random จาก blockHash ของ block ที่ commit:

bytes32 blockHash = blockhash(commits[msg.sender].blockNumber);
uint random = uint(keccak256(abi.encodePacked(blockHash, revealChoice, revealSalt))) % max;
ผลลัพธ์ที่ได้จาก random นี้สามารถนำมาใช้ในการตัดสินผลแพ้ชนะ หรือใช้ในการกำหนดผลลัพธ์ในลักษณะอื่นๆ ขึ้นอยู่กับกติกาที่กำหนด.